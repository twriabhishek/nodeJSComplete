1)No SQL document based Database
2)Strong Support for Aggregation Pipelines
3)Work  on BSON format
4)Best for Node Application


Table:- Collection
Row:- Document


-----------------------------------------------------------------------------------------------------------
Schema- Define the Structure
  Schema- Model
    Model- Perform CRUD operation
    [const User = mongoose.model("user", userSchema);
     Database m Collection users naam s banega means mongo db usey khud hi plural m change karr deta hai]

*)Hum First a fall schema banatey hai then Schema ki help s model create kartey hai aur isi model ki help s
crud operation Perform kartey hai.



*)With this setup, you can now perform CRUD (Create, Read, Update, Delete) operations on your User model using Mongoose methods like find, findOne, create, updateOne, deleteOne, etc.








--------------------------------------------------------------------------------------------------


Certainly! MongoDB operations used in endpoints typically involve CRUD operations (Create, Read, Update, Delete) as well as querying and aggregation. Here's a breakdown of the most common and important MongoDB operations used in endpoint development:

1. **Insert Documents**: Used to create new documents in a collection.
   - `insertOne()`: Insert a single document into the collection.
   - `insertMany()`: Insert multiple documents into the collection.

2. **Find Documents**: Used to retrieve documents from a collection.
   - `find()`: Retrieve documents based on a query filter.
   - `findOne()`: Retrieve a single document based on a query filter.
   - `findById()`: Retrieve a document by its unique identifier.

3. **Update Documents**: Used to modify existing documents in a collection.
   - `updateOne()`: Update a single document that matches the filter.
   - `updateMany()`: Update multiple documents that match the filter.
   - `findOneAndUpdate()`: Find a document, update it, and return the original or modified document.

4. **Delete Documents**: Used to remove documents from a collection.
   - `deleteOne()`: Delete a single document that matches the filter.
   - `deleteMany()`: Delete multiple documents that match the filter.

5. **Aggregation**: Used for advanced data processing and analysis.
   - `aggregate()`: Perform aggregation operations like grouping, sorting, and calculating aggregated results.

6. **Indexing**: Improve query performance by creating indexes on fields.
   - `createIndex()`: Create an index on one or more fields in a collection.

7. **Text Search**: Perform text searches within documents.
   - `createIndex()`: Create a text index on one or more text fields.
   - `$text`: Perform a text search query.

8. **Transactions**: Ensure data consistency across multiple operations.
   - `startSession()`: Start a new session for a transaction.
   - `withTransaction()`: Execute a series of operations within a transaction.

These operations are essential for building CRUD endpoints and performing complex data manipulation in MongoDB-based applications. Depending on the requirements of your application, you may use a combination of these operations to implement various endpoint functionalities.