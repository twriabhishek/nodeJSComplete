:::::::::::RESTFUL API::::::::::

Kuch sets of rules hotey hai jinko jab koi api follow karti hai then wo api RESTFUL api kahlati hai.
1)Always follow client-server architecture.
2)Always respect HTTP methods[post, put, patch, delete, get]






Creating a RESTful API involves adhering to certain principles to ensure its efficiency, scalability, and maintainability. Here are five important key rules for designing RESTful APIs:

1. **Use HTTP Methods Correctly**: 
    - **GET**: Use for retrieving resources.
    - **POST**: Use for creating new resources.
    - **PUT**: Use for updating existing resources (replace or create if not existent).
    - **PATCH**: Use for partial updates to existing resources.
    - **DELETE**: Use for deleting resources.

2. **Resource Naming and URIs**:
    - Use nouns to represent resources rather than verbs.
    - Keep URIs hierarchical and predictable.
    - Use plural nouns to denote collections (e.g., `/users` to represent a collection of user resources).
    - Use specific identifiers for individual resources (e.g., `/users/{id}` to represent a specific user).

3. **Use HTTP Status Codes Correctly**:
    - Use appropriate HTTP status codes to convey the outcome of the request.
    - Common status codes:
        - 200 OK: Successful GET request.
        - 201 Created: Successful POST request.
        - 204 No Content: Successful DELETE request.
        - 400 Bad Request: Malformed request.
        - 404 Not Found: Resource not found.
        - 405 Method Not Allowed: Unsupported HTTP method for a resource.
        - 500 Internal Server Error: Server-side error.

4. **Content Negotiation**:
    - Support multiple representations of resources (e.g., JSON, XML).
    - Use the `Accept` header to specify the desired representation.
    - Use the `Content-Type` header to specify the representation of the request payload.

5. **Statelessness**:
    - Each request from the client to the server must contain all the information necessary to understand and fulfill it.
    - Server should not store client state between requests.
    - Use stateless authentication mechanisms like JSON Web Tokens (JWT) or OAuth.

Adhering to these principles will help you design RESTful APIs that are intuitive, scalable, and interoperable. However, remember that these rules are guidelines, and there can be exceptions based on specific use cases and requirements.